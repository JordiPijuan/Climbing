<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JSONAPI</name>
    </assembly>
    <members>
        <member name="T:JSONAPI.Core.IPluralizationService">
            <summary>
            A mirror of System.Data.Entity.Infrastructure.Pluralization.IPluralizationService,
            but redefined here to allow usage without a dependency on Entity Framework.
            </summary>
        </member>
        <member name="M:JSONAPI.Core.IPluralizationService.Pluralize(System.String)">
            <summary>
            Return the plural form of a word. This function should be idempotent! (Allowing for the caveat that
            explicit mappings may be required to make this be true.)
            </summary>
            <param name="word">The word to pluralize</param>
            <returns>The plural form of the word</returns>
        </member>
        <member name="M:JSONAPI.Core.IPluralizationService.Singularize(System.String)">
            <summary>
            Return the plural form of a word. This function should be idempotent! (Allowing for the caveat that
            explicit mappings may be required to make this be true.)
            </summary>
            <param name="word">The word to singularize</param>
            <returns>The singular form of the word</returns>
        </member>
        <member name="T:JSONAPI.Core.PluralizationService">
            <summary>
            A horribly naive, default implementation of <see cref="T:JSONAPI.Core.IPluralizationService"/>.
            If you use this, at least specify mappings extensively!
            </summary>
        </member>
        <member name="M:JSONAPI.Core.MetadataManager.PropertyWasPresent(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Find whether or not a given property was
            posted in the original JSON--i.e. to determine whether an update operation should be
            performed, and/or if a default value should be used.
            </summary>
            <param name="deserialized">The object deserialized by JsonApiFormatter</param>
            <param name="prop">The property to check</param>
            <returns>Whether or not the property was found in the original JSON and set by the deserializer</returns>
        </member>
        <member name="M:JSONAPI.Http.ApiController`1.QueryableFactory(JSONAPI.Core.IMaterializer)">
            <summary>
            Override this method to provide an IQueryable set of objects of type T, which
            will be passed to the OData query processor to support OData queries. If this
            method is not overridden, an empty List&lt;T&gt; will be returned, which will
            mean that using OData query parameters will always return no results.
            </summary>
            <param name="materializer"></param>
            <returns></returns>
        </member>
        <member name="M:JSONAPI.Http.ApiController`1.Post(System.Collections.Generic.IList{`0})">
            <summary>
            In this base class, the Post operation is essentially a no-op. It returns a materialized
            copy of the object (which is meaningless unless the materializer implements
            some logic that does something to it), but fulfills the JSONAPI requirement
            that the POST operation return the POSTed object. It should probably be
            overridden in any implementation.
            </summary>
            <param name="postedObj"></param>
            <returns></returns>
        </member>
        <member name="M:JSONAPI.Http.ApiController`1.Put(System.String,System.Collections.Generic.IList{`0})">
            <summary>
            Similar to Post, this method doesn't do much. It calls MaterializeUpdate() on the
            input and returns it. It should probably always be overridden.
            </summary>
            <param name="id"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:JSONAPI.Http.ApiController`1.Delete(System.String)">
            <summary>
            A no-op method. This should be overriden in subclasses if Delete is to be supported.
            </summary>
            <param name="id"></param>
        </member>
    </members>
</doc>
